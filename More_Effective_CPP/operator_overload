
class Rational {
public:
  operator double() const {}
};

//also implicit constructors ^

class Array {
public:
	class ArraySize {
	public:
		ArraySize(int sz):size_(sz) {}
		int size() const {return size_;};
	private:
		int size_;
	};
	explicit Array(ArraySize s) {}
};

//proxy class, to prevent more than one user defined implicit conversion ^

class Int {
public:
	Int& operator++();
	const Int operator++(int);
	
	Int& operator--();
	const Int operator--(int);
	
	Int& operator+=(const Int& other); //or just int to add 1 
};

Int& Int::operator++() {
	(*this) += 1; // = *this + 1
	return *this;
}

const Int Int::operator++(int) {
	const Int oldVal = *this;
	++(*this);
	return oldVal;
}
