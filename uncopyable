
if you want to prevent copying e.g. make copy constuctor and assignment operator invalid

1. you can declare copy constructor and assignment operator private and not DEFINE them
 
 class cls {
  public:
  //...
  private:
  cls(const cls&);
  cls& operator=(const cls&);
 };
 
 this way even friend or member functions cannot call them, but at link-time
 so if you want to make this happen at comple-time then next trick is useful
 
class uncopyable {
 protected:
  uncopyable(){}
  ~uncopyable(){}
 private:
  uncopyable(const uncopyable&);
  uncopyable& operator=(const uncopyable&);
};

class someclass : private uncopyable {};

 so you just derive any class from uncopyable
 but it is important to derive 'private' because this is an implementation detail
 it is also important to make destructor not virtual to enable base class optimization
 but this may lead to multiple inheritance which turns off base class optimizatoin
 one can also use boost version of the funciton described above. it is called 'noncopyable' there
 (is-a, has-a, is-implemented-in-terms-of-a)
