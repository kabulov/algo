
SOLUTION

just like binsearch, but when v[mid] is trash, then find closes non-trash
time complexity: O(logn + amount_of_trash)

code:

//returns pos;
int search(const vector<string>& v, const string& key, int size) {
  int lt = 0;
  int rt = size;
  int mid;
  while(lt + 1 < rt) {
    mid = (lt + rt) / 2;
    if (v[mid].size() == 0){
      int hi = mid + 1;
      int lo = mid - 1;
      while (lt <= lo || hi <= rt) {
        if (hi <= rt && v[hi].size() > 0) {
          mid = hi;
          break;
        }
        if (lt <= lo && v[lo].size() > 0) {
          mid = lo;
          break;
        }
        ++hi;
        --lo;
      }
      if (lt > lo && hi > rt) {
        return -1;
      }
    }else{
      if (key < v[mid]){
        rt = mid;
      } else {
        lt = mid;
      }
    }
  }
  return lt; //check if v[lt] == key ?, return supposed pos
}
