
STATEMENT

write an algorithm to find the 'next' node (in-order successor) of a given node in a binary
search tree. you may assume that each node has a link to its parent

SOLUTION

questions:

clear

solution & analysis & design:

for next : 
 right child, then leftmost child in this subtree
 if no right child, the most left parent, then right parent
 if no right parent at the end, then initially was maximal element
 
for prev:
 left child, then rightmost child in this subtree
 if no left child, the most right parent, then left parent
 if no left parent at the end, then initially was the minimal element

code:

#include <cstdlib>

struct Node {
	int data;
	Node *left, *right, *parent;
	Node(int d):data(d), left(NULL), right(NULL), parent(NULL){}
};

Node* next(Node* node) {
	if (node == NULL) {
		return NULL;
	}
	if (node->right != NULL) {
		node = node->right;
		while (node->left != NULL){ 
			node = node->left;
		}
		return node;
	}
	Node* save = node; 
	//so if node was the max elem then we return the node itself so as to 
	//compare pointers and we are able to define either it is a max element;
	while (node->parent != NULL && node->parent->data < node->data) {
		node = node->parent;
	}
	if (node->parent == NULL) {
		return save;	
	}
	return node->parent;
}


mistakes & enhancements:

