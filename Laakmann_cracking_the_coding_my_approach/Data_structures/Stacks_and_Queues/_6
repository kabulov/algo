
STATEMENT

write a program to sort a stack in ascending order (with biggest items on the top).
you may use at most one additional stack to hold items, but you may not copy the elements
into any other data structure (such as an array). The stack supports the following operations:
push, pop, top, empty

SOLUTION

questions:

what are elements ? ints ? other ?
how big is it ?

solution & analysis & design:

1.
just iterate through given stack, put elements in second stack,
if top of given stack <= top of second stack, go ahead,
else swap tops 
(that is, keep first.top, first.push(second.top), second.pop, first.push(keep))

timme complexity: O(n^2) worst case, e.g. if we are given descending toward top direction sequence
space complexity: O(1) except given stacks

code:

#include <stack>
using std::stack;

template<class T>
void sort(stack<T>& first) { //or return new stack ?
  stack<T> second;
  while (!first.empty()) {
    if (second.empty() || first.top() <= second.top()) {
      second.push(first.top());
      first.pop();
    }else{
      T keep = first.top();
      first.pop();
      first.push(second.top());
      second.pop();
      first.push(keep);
    }
  }
  while (!second.empty()) {
    first.push(second.top());
    second.pop();
  }
}

mistakes & enhancements:

what if we had unlimited stacks -> could we sort faster ?

sure, we cannot sort faster than O(nlogn) using supposed model
but we can achieve O(nlogn). Just remember two major algos that do this in O(nlogn).

mergesort:
on each level of recursion we would divide array into two parts (in two stacks)
sort each, and merge them back in sorted order into the original stack

#include <stack>
using std::stack;

template<class T>
void sort(stack<T>& st) { //or return new stack ?
	if (st.size() <= 1) {
		return;
	}
	stack<T> lt;
	stack<T> rt;
	while (!st.empty()) {
		lt.push(st.top());
		st.pop();
		if (!st.empty()){
			rt.push(st.top());
			st.pop();
		}
	}
	sort(lt);
	sort(rt);
	while (!(lt.empty() && rt.empty())) {
		if (lt.empty() || rt.empty()){
			st.push(lt.empty() ? rt.top() : lt.top());
			lt.empty() ? rt.pop() : lt.pop();
		} else { 
			st.push(lt.top() > rt.top() ? lt.top() : rt.top());
			lt.top() > rt.top() ? lt.pop() : rt.pop();
		}
	}
	while(!st.empty()){
		lt.puh(st.top());
		st.pop();
	}
	while(!lt.empty()){
		st.push(lt.top());
		lt.pop();
	}
}


quicksort:
on each level of recursion we use two stacks to put elements based on a pivot element. 
sort each. and merge back into the original stack.

