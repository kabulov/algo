
STATEMENT

implement a queue using two stacks

SOLUTION

questions:

ints ? other?

solution & analysis & design:

straightforward

code:

#include <stack>
using std::stack;

template<class T>
class queue {
public:
	queue();
  T front();
	void push(T item);
  void pop();

private:
  stack<T> fst;
  stack<T> scd;
};

template<class T>
T queue<T>::fron() {
  if (fst.empty() && scd.empty()) {
    //throw here
  }
  if (scd.empty()){
    while(!fst.empty()){
      scd.push(fst.top());
      fst.pop();
    }
  }
  return scd.top();
}

template<class T>
inline void queue<T>::push(T item) {
   fst.push(item);
}

template<class T>
queue<T>::queue():fst(),scd(){}

template<class T>
void queue<T>::pop() {
  if(scd.empty()){
    while(!fst.empty()){
      scd.push(fst.top());
      fst.pop();
    }
  }
  scd.pop();
}

mistakes & enhancements:

is that all your interface ? too small 
also : code duplication, when copying from fst to scd

#include <stack>
using std::stack;

template<class T>
class queue {
public:
	queue();
  T front();
	void push(T item);
  void pop();
	bool empty();
	size_t size();
	void clear();

private:
	void shift();
  stack<T> fst;
  stack<T> scd;
};

template<class T>
size_t size() {
	return fst.size() + scd.size();
}

template<class T>
bool queue<T>::empty() {
	return fst.empty() && scd.empty();
}

template<class T>
void queue<T>::clear() {
	while(!fst.empty()) {
		fst.pop();
	}
	while(!scd.empty()) {
		scd.pop();
	}
}

template<class T>
void queue<T>::shift() {
  if (scd.empty()){
    while(!fst.empty()){
      scd.push(fst.top());
      fst.pop();
    }
  }
}

template<class T>
T queue<T>::front() {
	shift();
  if (scd.empty()) {
    //throw here
  }
	return scd.top();
}

template<class T>
inline void queue<T>::push(T item) {
   fst.push(item);
}

template<class T>
queue<T>::queue():fst(),scd(){}

template<class T>
void queue<T>::pop() {
	shift();
	if (scd.empty()){
		//throw here
	}
	scd.pop();
}


