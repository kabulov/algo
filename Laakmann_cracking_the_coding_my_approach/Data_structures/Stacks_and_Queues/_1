
STATEMENT

describe how you would use a single array to implement three stacks

SOLUTION

questions:

what is data ? ints ? other ?
static array ? dynamic array ?
whill there always be enough place ?

solution & analysis & design

1.
keep tops for each stack
put them all in a vector of pairs, first - prev elementpos, second - item
also additional - fourth stack - stack of empty places, keep his top too
while push check, if place in fourth stack, put there, else push_back to 
given placeholder

code:


#include <vector>
#include <utility>
#include <exception>

using std::vector;
using std::pair;
using std::make_pair;
using std::exception;

typedef pair<int, int> pii;

const int NEXIST = -1;
const int EMPTY = 3;

//pair <first-start, second-top>
vector<int> stack(4, NEXIST);

//one array that takes 3 stacks, like trie
//pair<first-pos of previous, second-data>
vector<pii> place;

bool empty(int stack_no) {
	return stack[stack_no] == NEXIST;
}

int top(int stack_no) {
	if (empty(stack_no)){
		throw exception();
	}
	return place[stack[stack_no]].second;
}

void push(int stack_no, int item) {
	pii new_item = make_pair(NEXIST, item);
	if (!empty(stack_no)){
		new_item.first = stack[stack_no];
	}
	if (empty(EMPTY)) {
		stack[stack_no] = place.size();
		place.push_back(new_item);
	}else{
		int top = stack[EMPTY];
		int new_top = place[top].first;
		place[top] = new_item;
		stack[stack_no] = top;
		stack[EMPTY] = new_top;
	}
}

int pop(int stack_no) {
	if (empty(stack_no)){
		throw exception();
	}
	int top = stack[stack_no];
	int ret = place[top].second;
	stack[stack_no] = place[top].first;
	place[top].first = stack[EMPTY];
	stack[EMPTY] = top;
	return ret;
}

//would it not be better to put this all in a class to account for any type T ?

int main( ){

	return 0;
}

 

mistakes & enhancements:

so it just all boils down to understand that there is no perfect solution,
it depends, and one can provice some complicated algorithm which takes
into account frequencies of push pop operations, expected amount of elements
in each stack and so on.

two approaches are:
1. make an array of fixed size 
then e.g. divide it into 3 equal parts and give each part to each stack
2. make an array of dynamic size, circular, shift maybe and so on
3. like this : [a,b,c], treat each part like std::vector (increase by two when full, etc)
but when e.g. increasing 'a', shift everything to the right, then if 
the overall sizes of a,b,c are equal to n each, then amortized time 
for each operation would be O(log(n))

for code part, it is important to write clean and maintainable code, 
divide into methods, declare and specify additional classes maybe
