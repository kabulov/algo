
STATEMENT

you have two numbers represented by a linked list, where each node contains single digit.
the digits are stored in reverse order, such that the 1`s digit is at the head of the list.
write a function that adds the two numbers and return the sum as a linked list.
follow up:
suppose the digits are stored in forward order. repeat the above problem.

SOLUTION

questoions:

do we have to store the resulting number in one of the given lists or create the new one ? new list
is it possible for one of them to be empty ? no
what is the number system ? supposing that it is 10
should the sum be represented in the same reversed manner ? yes
follow up:
zeroes in front of the number ?

solution & analysis & design:

just add two numbers, 'school method'
time complexity: O(max(len of first, len of second))
space complexity: O(max(len of first, len of second))

code:

1. 

#include <cstdlib> //NULL, or <utility>

struct List {
  struct List* next;
  int digit;
  List(int d):digit(d),next(NULL){}
};

typedef struct List TList;
typedef struct List* PList;

int getDigit(PList digit) {
  return digit == NULL ? 0 : digit->digit;
}

void moveForward(PList& elem) {
  if (elem == NULL) return;
  elem = elem->next;
}

//maybe something like operator+
PList add(PList fst, PList scd, int base = 10) { //maybe const & is not best solution, params are just pointers
  if (fst == NULL || scd == NULL) {
    return NULL;
  }
  PList head = NULL;
  PList tail = NULL;
  int carry = 0;
  int new_digit;
  while (fst != NULL || scd != NULL) {
    new_digit = carry + getDigit(fst) + getDigit(scd);
    carry = new_digit / base;
    new_digit %= base;
    if (tail == NULL) {
      head = tail = new TList(new_digit);  
    } else {
      tail->next = new TList(new_digit);
      moveForward(tail);
    }
    moveForward(fst);
    moveForward(scd);
  }
  if (carry != 0) {//tail != NULL for sure here
    tail->next = new TList(carry);
  }
  return head;
}

2. follow up

e.g. if we implement reverse(list) then we can heavily rely on this function, but lets do straightforward
seems it is about recursion
one option is to use comparison of pointers to determine wheter one number is 'went by'

#include <cstdlib>

struct List {
  List* next;
  int digit;
  List(int d):digit(d),next(NULL) {}
  void setNext(List* node) {
    next = node;
  }
  bool hasNext(){
    return next != NULL;
  }
};

typedef List* PList;

const int base = 10;

int len(PList list) {
  int ret = 0;
  while(list != NULL) {
    ++ret;
    list = list->next;
  }
  return ret;
}

PList addSpecial(PList big, PList small, int diff) {
  if (big->next == NULL && small->next == NULL) {
    int new_digit = small->digit + big->digit;
    PList node = new List(new_digit % base);
    PList carry = new List(new_digit / base);
    carry->setNext(node);
    return carry;
  } 
  PList node = addSpecial(big->next, diff ? small : small->next, diff ? diff - 1 : 0);
  int new_digit = node->digit + big->digit + (diff ? 0 : small->digit);
  node->digit = new_digit % base;
  PList carry = new List(new_digit / base);
  carry->setNext(node);
  return carry;
}

PList add(PList fst, PList scd) { //assume none of params is NULL, assume base is 10
  int l1 = len(fst);
  int l2 = len(scd);
  PList ret = NULL;
  if (l1 <= l2) {
    ret = addSpecial(scd, fst, l2-l1);
  }else{
    ret = addSpecial(fst, scd, l1-l2);
  }
  return ret;
}

mistakes & enhancements:

questios:
follow up:
can we pad zeroes befor given numbers ?
seems we have to brake code into parts(methods).
seems we have to make wrapper class, but it is not necessary as we have workaround
seems we have to find lengths of numbers.
