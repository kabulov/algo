
STATEMENT

implement a function to check if a linked list is palindrome

SOLUTION

questions:

can we use additional space ?
length of list is even ?
recursion ?

solution & analysis & design:

1.
reverse and compare

2.
recursion

3.
very stupid O(n^2) straightforward solution

code:

struct List {
  List* next;
  int data;
  List(int d):data(d),next(NULL){}
};

typedef List* list;

1.

bool isPalindrome(list head) {
  list runner = head;
  list reverse = NULL;
  while (runner != NULL) {
    list node = new List(runner->data);
    if (reverse == NULL) {
      reverse = node;
    }else{
      node->next = reverse;
      reverse = node;
    }
    runner = runner->next;
  }
  while (head != NULL) {
    if (head->data != reverse->data){
      return false;
    }
    head = head->next;
    reverse = reverse->next;
  }
  return true;
}

2.

bool isPalindromeHelper(list head, list& tail) {
  if (tail->next == NULL) {//even len
    tail = head->next;
    return true;
  }
  if (tail->next->next == NULL) {//odd len
    tail = head->next->next;
    return true;
  }
  tail = tail->next->next;
  bool ret = isPalindromeHelper(head->next, tail);
  ret &= head->data == tail->data;
  tail = tail->next;
  return ret;
}

bool isPalindrome(list head) {
  if (head==NULL || head->next==NULL){
    return true;
  }
  list tail = head->next;
  bool ret = isPalindromeHelper(head, tail);
  return ret;
}

3.
go run and compare to corresponding element
for in for, no...

mistakes & enhancements:

1.
we actually need to compare only first halves !

2.


4.
there was a solution including stack !
know the len or dunno the len(slow/fast use)

