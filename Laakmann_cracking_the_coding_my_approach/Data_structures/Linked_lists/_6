
STATEMENT

given a circular linked list, implement an algorithm which returns the node at the beginning of the loop

SOLUTION

questions:

is it guaranteed to have a loop ?
is it a singly linked list ?
can we check equality of pointers ?

solution & analysis & design:

typica : detect if a singly linked list has a loop

it is easy as we use two pointers and move one one step forward
and move second two steps forward in each step
but 
here we also have to find the node at the beginning of the loop
we could use some extra space to indicate the amount of predecessors of the node
but lets instead use no extra space but run the list 3 times

time complexity: O(n)
space complexity: O(1)

code:

lets assume that the data is int to prevent templates

#include <cstdlib>

struct List {
  List* next;
  int data;
};

typedef List* list;

void move(list& elem) {
  elem=elem->next;
}

list loopStart(list head) { //at least one element in the sequence, guaranteed to have a loop
  if (head->next == head) { //it turns out that loopStart works even without this if
    return head;
  }
  list prev = head;
  list next = head->next;
  while(prev != next) { //pointer comparison here : any other way to compare these ?
    move(prev);
    move(next);
    move(next);
  }
  //now both prev and next indicate the node in the loop, so lets find the length of the loop
  list front = head;
  do {//loop has len at least one
    move(front);
    move(next);
  }while(prev != next);
  //now we now the len of the loop
  while(head != front) {
    move(head);
    move(front);
  }
  return head;
}

mistakes & enhancements:

