
STATEMENT

write code to parition a linked list around a value x, 
such that all nodes less than x come before all nodes greater than or equal to x.

SOLUTION

questions:

do we have operator < defined for x ?
are we doing everything in place ?
is it important to have value x in the middle of a list afterall ?

solution & analysis & design:

it is obvious that we are given a head of list, otherwise it would be not possible in some cases
to partition around value x

1.
if it is not important to have layout like : less than x, equal to x, greater than x - then
we just iterate through the list from the head and put every value smaller than x in head of the list
time complexity: O(n)
space complexity: O(1)

code:

#include <cstdlib> //NULL

template<class T>
class List {
public:
  List<T>* next;
  T data;
};

template<class T>
List<T>* partition(List<T>* head, T x) { //return new head
  if (head == NULL) {
    return NULL;
  }
  List<T>* new_head = head;
  List<T>* prev = head;
  head = head->next;
  while (head != NULL){
    if (head->data < x) { //op < for T
      prev->next = head->next;
      head->next = new_head;
      new_head = head;
      head = prev->next;
    } else {
      head = head->next;
      prev = prev->next;
    }
  }
  return new_head;
}

mistakes & enhancements:

quesitons & code:

1.
but what if we dont want to mess the original list ?

template<class T>
List<T>* partition(List<T>* head, T x) {
  if (head == NULL) {
    return NULL;
  }
  List<T>* start = NULL;
  List<T>* end = NULL;
  while (head != NULL){
    List<T>* buf = new List<T>();
    buf->data = head->data;
    buf->next = NULL;
    if (head->data < x) {
      if (start == NULL) {
        start = end = buf;
      }else{
        buf->next = start;
        start = buf;
      }
    }else{
      if (end == NULL) {
        start = end = buf;
      }else{
        end->next = buf;
        end = buf;
      }
    }
    head = head->next;
  }
  return start;
}
  
2.
does it have to be stable ?!
to make it stable we use two passes

template<class T>
List<T>* partition(List<T>* head, T x) {
  if (head == NULL) {
    return NULL;
  }
  List<T>* start = NULL;
  List<T>* end = NULL;
  for (int i = 0; i < 2; ++i) {
    List<T>* runner = head;
    while (runner != NULL) {
      if ((i == 0 && runner->data < x) || (i == 1 && runner->data >= x)) {
        if (end == NULL ){
          List<T>* elem = new List<T>();
          elem->data = runner->data;
          elem->next = NULL;
          end = start = elem;
        } else {
          List<T>* elem = new List<T>();
          elem->data = runner->data;
          elem->next = NULL;
          end->next = elem;
          end = elem;
        }
      } 
      runner = runner->next;
    }
  }
  return start;
}
