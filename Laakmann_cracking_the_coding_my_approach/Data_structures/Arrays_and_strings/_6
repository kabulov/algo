
STATEMENT

given an image represented by an NXN matrix, where each pixel in the image is 4 bytes,
write a method to rotate the image by 90 degrees. can you do this in place ?

SOLUTION

questons:
1.
right or left ?

2.
can we use ints nXn int matrix for storing the image ?

3.
maybe there is some additional information that could ease the process
(like 90% of elements are zeroes, dunno how to use this:) )

solution & analysis & design:

1.
just in place rotation
assume that we are rotating 90 degrees to the right
just have to derive formulas
formulas: 
for (int i = 0; i < n-1-i; ++i) {
 for (int j = i; j < n - 1 - i; ++j) {
  (i,j)->(i+j,n-1-i)->(n-1-i,n-1-i-j)->(n-1-i-j,i)->(i,j)
 }  
}
time complexity:O(nXn)
space complexity: assuming that we do in place, O(1)

code:

#include <vector>

using std::vector;

1.
void rotate_right(vector<vector<int> >& v, int n) {
  int buf;
  for (int i = 0; i < n - 1 - i; ++i) {
    for (int j = i; j < n - 1 - i; ++j) {
      buf = v[n-1-i-j][i];
      v[n-1-i-j][i]=v[n-1-i][n-1-i-j];
      v[n-1-i][n-1-i-j]=v[i+j][n-1-i];
      v[i+j][n-1-i]=v[i][j];
      v[i][j]=tmp;
    }
  }  
}

2.

#include <vector>

using std::vector;

typedef vector<vector<int> > vvi;

enum { _right_ = 1, _left_ = -1 };

void shift(vvi& v, int n, int i, int j, int dir = _right_) {
 int buf;
 if (dir == _right_) {
  buf = v[n-1-i-j][i];
  v[n-1-i-j][i]=v[n-1-i][n-1-i-j];
  v[n-1-i][n-1-i-j]=v[i+j][n-1-i];
  v[i+j][n-1-i]=v[i][j];
  v[i][j]=buf; }else
 if (dir == _left_) {
  buf = v[i][j];
  v[i][j]=v[i+j][n-1-i];
  v[i+j][n-1-i]=v[n-1-i][n-1-i-j];
  v[n-1-i][n-1-i-j]=v[n-1-i-j][i];
  v[n-1-i-j][i]=buf;
 }else{
  //exception
 }
}

void rotate(vvi& v, int n, int dir = _right_) {
 for (int i = 0; i < n - 1 - i; ++i) {
  for (int j = i; j < n - 1 - i; ++j) {
   shift(v, n, i, j, dir);
  }
 } 
}

mistakes & enhancements:

we could introduce variables first, last and offset in each step 
and make first = layer, last = n - 1 - layer, offset = i - first
where layer is the variable corresponding to the outer loop
and then
coordinates of the points we are rotating would become much clear and comprehensible

for (int layer = 0; layer < n - 1 - layer; ++layer) {
 int first = layer;
 int last = n - 1 - layer;
 for (int i = first; i < last; ++i) {
  int offset = i - first;
  int buf = v[first][i];
  v[first][i]=v[last-offset][first];
  v[last-offset][first]=v[last][last-offset];
  v[last][last-offset]=v[i][last];
  v[i][last]=buf;
 }
}
