
STATEMENT

implement a method to perform basic string compression using the counts of repeated characters.
for example, string abbccc would become a1b2c3.
if the 'compressed' string would not become smaller than the original string,
your method should return the original string

SOLUTION

questions:

should that happen in place ?
what do we do if the original string is made up of integers, 
we should use some character as a delimiter between a digit and the count ?
is it case sensitive ? e.g. aaaAAA is a3A3 or a6(A6)
do we take into account spaces ? or skip them ?

solution & analysis & design:

lets do that in place and return the old len
first count the result len and if it is smaller than the length of the original string then
iterate from front to back and  count each contiguous sequence of same chars and count their amount and 
supsede it with the char and the amoun
time complexity: O(n), where n is the length of the original string
space complexity: O(1), assuming that everything is taking place in place

code:

#include <string>

using std::string;

int append_num_to_string(string& s, int& len, int num){
  int old_len = len;
  int rev = 0;
  while(num){
    rev = rev * 10 + num % 10;
    num /= 10;
  }
  while(rev){
    s[len]=rev%10;
    rev /= 10;
    ++len;
  }
  return old_len;
}

int get_new_len(const string& s) {
  int new_len = 0;
  int cnt = 1;
  for (int i = 1; i < s.size(); ++i) {
    if (s[i] == s[i-1]){ 
      ++cnt;
    }else{
      new_len += cnt + 1;
      cnt = 1;
    }  
  }
  new_len += cnt + 1;
	return new_len;
}

int compress(string& s) {
  if (s.size() == 0) {
    return 0;
  }
  int old_len = s.size();
	int new_len = get_new_len(s);
	if (new_len >= old_len) {
    return old_len;
  }
  new_len = 0;
  int old_pos;
  int new_pos = 0;
  while (new_pos < old_len) {
    old_pos = new_pos;
    ++new_pos;
    while(new_pos < old_len && s[new_pos] == s[old_pos]) {
      ++new_pos;
    }
    s[new_len]=s[old_pos];
    ++new_len;
		append_num_to_string(s,new_len,new_pos-old_pos);
	}
  s.resize(new_len);
  s.shrink_to_fit();
  return old_len;
}


mistakes & enhancements:

1.
the book doesnt take into account the case when the string has 0 length
and gets the first element, but this is an exception

2.
why didnt i use built in methods like std::to_string(int) ?
because i tried to do everything inplace, lets try it no in place

3.
i somehow skipped that it is 1 + to_string(cnt).size() instead 1 + cnt;

code:

#include <string>

using std::string;
using std::to_string;

int get_compressed_size(const string& s) { //s.size() > 0 guarantee
	int ret = 0;
	int cnt = 1;
	for (int i = 1; i < s.size(); ++i){
		if (s[i]==s[i-1]) {
			++cnt;
		}else{
			ret += 1 + to_string(cnt).size();
			cnt=1;
		}
	}
	ret += 1 + to_string(cnt).size();
	return ret;
}

string compress(const string& s) {
  if (s.size() == 0) {
    return s;
  }
  int compressed_size = get_compressed_size(s);
  if (compressed_size >= s.size()) {
  	return s;
  }
  string ret;
	ret.reserve(compressed_size);
  int old_pos;
  int new_pos = 0;
  while (new_pos < s.size()) {
  	old_pos = new_pos;
  	++new_pos;
  	while(new_pos < s.size() && s[new_pos]==s[old_pos]){
  		++new_pos;
  	}
  	ret.push_back(s[old_pos]);
  	ret.append(to_string(new_pos - old_pos));
  }
  return ret;
}

2.

#include <string>

using std::string;
using std::to_string;

int get_compressed_size(const string& s) { //s.size() > 0 guarantee
	int ret = 0;
	int cnt = 0;
	char last = s[0];
	for (int i = 1; i < s.size(); ++i) {
		if (s[i]==last) {
			++cnt;
		}else{
			ret += 1 + to_string(cnt).size();
			last=s[i];		
			cnt = 1;
		}
	}
	ret += 1 + to_string(cnt).size();
	return ret;
}

string compress(const string& s){
	if (s.size() == 0 ){
		return s;
	}
	int compressed_size = get_compressed_size(s);
	if (compressed_size >= s.size()) {
		return s;
	}
	string ret;
	ret.reserve(compressed_size);
	int cnt = 1;
	char last = s[0];
	for (int i = 1; i < s.size(); ++i) {
		if (s[i] == last) {
			++cnt;
		}else{
			ret.push_back(last);
			ret.append(to_string(cnt));
			last = s[i];
			cnt = 1;
		}
	}
	ret.push_back(last);
	ret.append(to_string(cnt));
	return ret;
}

