Кабулов Казим (номер в списке 14)

Обозначения :

A - входная(основная квадратная) матрица
B - вектор свободных членов
X - вектор неизвестных 
n - размерность A
tmp - вспомогательная память

Цель :

Решение системы линейных уравнений методом LU-разложения основной матрицы.

Структура проекта:

3 файла :
 -main_lss_14_07.c : здесь расположена точка входа проекта - функция main, в которой содержится интерфейсная часть проекта. 
  Разбирает и реализует опции выполнения, вызывает основную вычислительную функцию(ниже) при отсутствии ошибок. 
 -lss_14_07.h : описание основной вычислительной функции(lss_14_07), и констант обозначающих включенность(ON) или выключенность(OFF) опций выполнения.
 -lss_14_07.c : реализация основной вычислительной функции, которая производит LU разложение основной матрицы и решает систему уравнений.

Структуры файлов:

--main_lss_14_07.c--

 1)Подключаемые модули
 2)Константы, содержащие имена входного(DEFAULT_INPUT_FILE_NAME) и выходного(DEFAULT_OUTPUT_FILE_NAME) файлов по умолчанию
 3)Глобальные переменные содержащие значения флагов -d(debug), -e(error), -p(printmtx), -t(printextm). Флаги принимают значения ON или OFF.
 4)Функции:
  -int usage(FILE* f) - в файл f выводит "инструкцию по применению программы"(возвращает 0) 	
  -int inputfileformat(FILE* f) - в файл f выводит формат входного файла(возвращает 0)
  -size_t lss_memsize_14_07(int n) - возвращает размер дополнительной памяти необходимой для системы с основной матрицей размера n 	
  -int main(int argc, char** argv) - функция реализующая интерфейсную часть проекта, где 
   argc - количество передаваемых программе параметров(целое положительное число) 
   argv - передаваемые программе параметры(массив строк) 

--lss_14_07.h--
 
 1)Определение значений флагов : ON == 1, OFF == 0
 2)описание основной вычислительной функции :
  int lss_14_07(int n, double* A, double* B, double* X, double* tmp)
  -входные параметры описаны в обозначениях
  -размер tmp определяется в функции lss_memsize_14_07  
  -функция возвращает:
    0 - при успешном решении системы
    (причем если определитель основной матрицы не равен 0, то при необходимости переставляет строки так, чтобы угловые миноры не были равны 0)
   -1 - если LU-метод не применим к матрице(определитель равен 0)
   
--lss_14_07.c--

 1)реализация основной вычислительной функции :
  -eps служит для сравнения с 0 :
   -тип double поддерживает 15 цифр после запятой.
    в компьютерном представлении вещественных чисел всегда присутствует погрешность.
    переменная типа double содержит в 15-й позиции после запятой некоторую погрешность,
    поэтому (double)0 < 1e-14, но не (double)0 == 0(в математическом смысле).
	В программе нужно в одном месте сравнивать числа с 0, но по вышеуказанным причинам
	приходится сравнивать с eps, где eps == 1e-14.
  -из опций выполнения реагирует только на -d(debug) : 
   -выводит основную матрицу
   -выводит основную матрицу после перестановки строк(даже если перестановки строк не было)
   -выводит LU матрицу : 
    L - (i,j), где i >= j
    U - (i,j), где i < j
   -выводит решение уравнения LY==B
   -выводит решение уравнения UX==Y
  -формальные параметры соответствуют описанным в обозначениях(выше)
  -копируем A в tmp и находим определитель, при этом используем tmp, размер tmp n*n
  -разлагаем A в LU и LU разложение храним в массиве A(разлагаем прямо в A)
  -в основной функции не рассматриваются ошибки :
   -считается, что все ошибки и несоответствия отлавливает main
   -основная функция получает гарантированно соответствующий условиям вход, поэтому только решает
 
Aлгоритм : 

-если |A| == 0 то метод LU разложения не применим
-иначе разлагаем A на LU и решаем : 1.LY=B 2.UX=Y

Детали:

1)определитель |A|
-определитель вычисляем по методу гаусса с выбором главного элемента по столбцу
-ищем максимальный элемент в столбце(в строках с номерами >= текущей строки(i)) в котором находится текущий ведущий элемент(A[i][i])
-переставляем строки(i-й и тот в котором максимум)
 -если ведущий элемент: A[i][i](A[i*n+i]) == 0 - то |A| == 0, останов
 -иначе строка A[i] /= A[i][i], строка A[p] -= A[i] * A[p][i], p = i+1, i+2, .., n-1
2)|A| != 0
-разлагаем A: A=>LU
-решаем LY==B(в проге Y это X)
-решаем UX==Y(в проге Y это X, таким образом не нужно заводить новый массив Y, все в X, вместо ненужных мест в X записывается ответ)

Usage: 
lss [input_file_name] [output_file_name] [options]
Where options include:
  -d    print debug messages [default OFF]
  -e    print errors [default OFF]
  -p    print matrix [default OFF]
  -t    print execution time [default OFF]
  -h, -?     print this and exit
Default input_file_name value is lss_14_07_in.txt, default output_file_name value is lss_14_07_out.txt.

-Здесь первая строчка - расположение бинарника программы (первое строковое поле аргументов функции main). Пример вызова программы:
 -main_lss_14_07 input.txt output.txt -e -t -d
-если введено имя input файла, но не введено имя output файла то ошибка
-если введено имя output файла, но не введено имя input файла то ошибка
-названия input и output файлов долдны идти вместе
-main выводит время выполнения программы(в stdout), если включена опция -t
-main выводит основную иатрицу(A)(в stdout), если включена опция -p
-main выводит сообщения об ошибках(в stderr), если включена опция -e :
 -например, если n == 3, а введены данные для системы из двух уравнений, то будет выведено сообщение об ошибке
 -но при выключенной опции -e такое сообщение не будет выведено, программа просто остановит выполнение
-main выводит отладочные сообщения(в stderr), если включена опция -d


