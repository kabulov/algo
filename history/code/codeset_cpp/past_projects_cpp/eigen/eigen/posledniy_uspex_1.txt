
#include "task_13_13.h"

int evc_13_13(int n, int max_iterations, double epsilon, double* A, double* E, double* tmp, double precision){
	return 0;	
}
 
int evc_memsize_13_13(int n){
	return 0;
}

__________________________


#include "task_13_13.h"

bool Debug;
bool Error;

bool Time;
bool Print;

int max_iter;

double prec;
double eps;

void init() {
	prec = 1e-14;
	eps = 1e-10;
	max_iter = 0;
	Time = false;
	Print = false;
	Debug = false;
	Error = false;
}

void usage() {
	printf("\n");
	printf("Usage: evc input_file_name [default - input.txt] output_file_name [default - output.txt] [options] \n");
	printf("Where options include: \n");
	printf(" -d    print debug messages [default OFF] \n");
    printf(" -e    print errors [default OFF]");
    printf(" -p    print matrix [default OFF]");
    printf(" -t    print execution time [default OFF]");
    printf(" -prec=<num>       precision [default - 1e-14] ");
    printf(" -eps=<num>        'epsilon' [default - 1e-10]");
    printf(" -max_iter=<num>   limit number of iterations [default - 0, i.e. not limit]");
    printf(" -h, -?     print this and exit");
}

int main(int argc, char** argv) {

	init();

	if (argc < 3) {
		usage();
		return 0; //nujno li uzmenit vozvrashaemoe znachenie zdes ? 
	}

	FILE *fin, *fout;

	if ((fin = fopen(argv[1], "r")) == NULL) {
		printf("bad input file name \n");
		usage();
		return 0;	//0?
	}

	//mojet ne stoit v samom nachale fout otkrivat?
	if ((fout = fopen(argv[2], "w")) == NULL) {
		printf("bad output file name \n");
		usage();
		return 0;	//0?
	}

	int n;
	//vse li normalno prochel?
	fscanf(fin, "%d", &n); 

	if (n < 2) {
		fprintf(stderr, "n too small \n");
		return 0; //0?
	}

	if (n > 100) {
		fprintf(stderr, "n too big \n");
		return 0;//0?
	}

	//vse li normalno videlil?
	double *A = (double*)malloc(n * n * sizeof(double));
	
	int i, j;
	for (i = 0; i < n; ++i)
		for (j = 0; j < n; ++j)
			fscanf(fin, "%lf", &A[i * n + j]); //vse li normalno prochel?

	fclose(fin); //problems?

		//!-matlab-!
		fprintf(fout, "x=[");
		for (i = 0; i < n; ++i) {
			for (j = 0; j < n; ++j) {
				fprintf(fout, "%1.10lf ", A[i * n + j]);
			}
			fprintf(fout, ";");
		}
		fprintf(fout, "];\n");


	double* overhead = (double*)malloc(sim_memsize_13_13(n) * sizeof(double));
	
	if (sim_13_13(n, A, overhead, prec) == -1) {
		printf("metod ne primenim : matrica ne simmetrichna libo opredelitel == 0 \n");

		free(A);
		free(overhead);

		return 0; // 0?
	}

	overhead = (double*)malloc(evc_memsize_13_13(n) * sizeof(double));
	
	double* Eigen = (double*)malloc(n * sizeof(double));
	//fprintf(fout, "%1.9lf\n", overhead);
	int respond = evc_13_13(n, max_iter, eps, A, Eigen, overhead, prec);
	

	if (respond == -1) {
		printf("metod ne primenim \n");

		free(A);
		free(Eigen);
		free(overhead);

		return 0; //0?
	} else

	if (respond == 1) {
		printf("metod ne sxoditsya za ukazannoe chislo iteraciy \n");

		free(A);
		free(Eigen);
		free(overhead);

		return 0; // 0?
	} else
	if (respond == 0) {
//		fprintf(fout, "%d \n", n);
//		for (i = 0; i < n; ++i) {
//			fprintf(fout, "%1.9lf \n", Eigen[i]);
//		}

//		for (i = 0; i < n; ++i) {
//			for (j = 0; j < n; ++j) {
//				fprintf(fout, "%1.9lf ", A[i * n + j]);
//			}
//			fprintf(fout, "\n");
//		}

		//!-matlab-!
		fprintf(fout, "y=[");
		for (i = 0; i < n; ++i) {
			for (j = 0; j < n; ++j) {
				fprintf(fout, "%1.10lf ", A[i * n + j]);
			}
			fprintf(fout, ";");
		}
		fprintf(fout, "];");

		free(A);
		free(Eigen);
		free(overhead);

	}

	return 0;
}



________________________________




#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

void usage();

 //0 - matrica simmetrichna
 //-1 - matrica ne simmetrichna -> metod uprosheniya ne primenim
int is_sim_13_13(int n, double* A, double precision);

 //1 - opredelitel != 0; 0 - opredelitel == 0
int is_det_zero_13_13(int n, double* A, double precision);

 //0 - работа завершена успешно, матрица упрощена
 //-1 - метод упрощения не применим к данной матрице
int sim_13_13(int n, double* A, double* tmp, double precision);
int sim_memsize_13_13(int n);


 //0 - работа завершена успешно
 //1 - метод не сходится за указанное число итераций
 //-1 - метод поиска собственных значений не применим к данной матрице
int evc_13_13(int n, int max_iterations, double epsilon, double* A, double* E, double* tmp, double precision);
int evc_memsize_13_13(int n);



_______________________




#include "task_13_13.h"


int is_sim_13_13(int n, double* A, double precision){
	int i, j;
	double ij, ji;

	for (i = 0; i + 1 < n; ++i)
		for (j = i + 1; j < n; ++j) {
			ij = A[i * n + j];
			ji = A[j * n + i];

			//otnositelnaya pogreshnost!!! 
			if (abs(ij / ji - 1) >= precision) {
				return -1; //mojet luchshe abs(ij - ji) >= precision -> absolyutnaya pogreshnost?, !-nujno podumat-!
			}
		}

	return 0;
}

int is_det_zero_13_13(int n, double* A, double precision){
	int i, j, k;
	double tmp;

	for (i = 0; i < n; ++i) {
		k = i;
		
		for (j = i + 1; j < n; ++j) {
			if (abs(A[j * n + i]) > abs(A[k * n + i]))	//abs!!!!
				k = j;
		}
		
		if (abs(A[k * n + i]) < precision) {
			return 0;	//opredelitel == 0
		}

		if (k != i) {
			for (j = i; j < n; ++j) { //swap
				tmp = A[i * n + j];
				A[i * n + j] = A[k * n + j];
				A[k * n + j] = tmp;
			}	
		}

		tmp = A[i * n + i];

		for (j = i; j < n; ++j) {
			A[i * n + j] /= tmp;
		}
		
		for (k = i + 1; k < n; ++k) {
			tmp = A[k * n + i];
		
			for (j = i; j < n; ++j) {
				A[k * n + j] -= A[i * n + j] * tmp;				
			}
		}
	}

	return 1;
}

int sim_memsize_13_13(int n){
	//return n * n > n + n ? n * n : n + n; // + 1 or 2 ??
	return n * n; //nujen dlya proveki opredelitelya na ravenstvo nulyu, no ne dlya algoritma privedeniya k pochti treugolnomu vidu
}

int sim_13_13(int n, double* A, double* tmp, double precision){
	if (is_sim_13_13(n, A, precision) != 0) {
		//printf("bad input : matrix is not symmetric!"); //metod ne primenim : matrica ne simmetrichna
		return -1; //0 ?
	}		

	int i, j, k;

	for (i = 0; i < n; ++i) 
		for (j = 0; j < n; ++j)
			tmp[i * n + j] = A[i * n + j];

	if (is_det_zero_13_13(n, tmp, precision) != 1) {
		//printf("bad input : |A| = 0"); // metod ne primenim : opredelitel == 0
		return -1;
	}	

	if (n < 2) return -1;
	
	//privedenie k pochti treugolnomu vidu : osnovnoy algoritm
	double sk, norm, buf;

	for (k = 0; k + 2 < n; ++k) {
		sk = 0;
		
		for (i = k + 2; i < n; ++i) {
			sk += A[i * n + k] * A[i * n + k];	//vichislyaem summu kvadratov
		}

		norm = sqrt(A[(k + 1) * n + k] * A[(k + 1) * n + k] + sk); //dobavlyaem ostavshiysa chlen i berem koren
		buf = norm;			//ocherednoy poddiagonalniy element
		
		if (abs(norm) < precision) continue; //uje 0, prodoljaem...
	
		A[(k + 1) * n + k] -= norm;		//sleduem formule
		norm = sqrt(A[(k + 1) * n + k] * A[(k + 1) * n + k] + sk); //vichislyaem normu otrajayushego x
		
		for (i = k + 1; i < n; ++i) {
			A[i * n + k] /= norm;	//vichislyaem sam vektor x(otrajayushiy)
		}

		for (i = k + 1; i < n; ++i) {
			A[k * n + i] = 0;
			for (j = k + 1; j < n; ++j) {
				A[k * n + i] += A[i * n + j] * A[j * n + k];	//vichislyaem Ax
			}
		}

		sk = 0;
		for (i = k + 1; i < n; ++i) {
			sk += A[i * n + k] * A[k * n + i];	//vichislyaem (y,x) - skalyarnoe proizvedenie. po formule iz bogacheva
		}

		for (i = k + 1; i < n; ++i) {
			A[k * n + i] -= sk * A[i * n + k];		//vektor z = 2(y - (y,x)x) iz formuli v bogacheve
			A[k * n + i] *= 2;
		}
		
		for (i = k + 1; i < n; ++i) { 
			for (j = i; j < n; ++j) {
				A[i * n + j] = A[j * n + i] = A[i * n + j] - A[k * n + i] * A[j * n + k] - A[i * n + k] * A[k * n + j]; //umnojaem na Ui
			}
		}

		A[(k + 1) * n + k] = A[k * n + (k + 1)] = buf; //mojno tolko odnu storonu, a snaruji 3 vektora!

		for (i = k + 2; i < n; ++i) {
			A[i * n + k] = A[k * n + i] = 0; //zachem obnulyat?
		}
	}

	return 0;
}

//osnovnoy algoritm : potreblyaet 2*n pamyati

/*
	//privodim k pochti treugolnomu vidu
	double sk, norm;

	for (k = 0; k + 2 < n; ++k) {//nichego ne sdelaet esli n == 2
		for (i = k + 1; i < n; ++i) {
			tmp[i] = A[i * n + k];
		}
		
		sk = 0;
		for (i = k + 2; i < n; ++i) {
			sk += A[i * n + k] * A[i * n + k];
		}

		norm = sqrt(A[(k + 1) * n + k] * A[(k + 1) * n + k] + sk);
		if (abs(norm) < precision) continue; //uje 0, prodoljaem...

		A[k * n + (k + 1)] = A[(k + 1) * n + k] = norm;

		for (i = k + 2; i < n; ++i) {
			A[k * n + i] = A[i * n + k] = 0;		
		}	

		tmp[k + 1] -= norm;
		norm = sqrt(tmp[k + 1] * tmp[k + 1] + sk);

		for (i = k + 1; i < n; ++i) {
			tmp[i] /= norm;
		}

		//k + 1, k + 1,
		for (i = k + 1; i < n; ++i) { //mojet memory chut bolshe nado?? dlya tmp...
			tmp[i + n] = 0;
			for (j = k + 1; j < n; ++j) {
				tmp[i + n] += A[i * n + j] * tmp[j];
			}	
		}

		sk = 0;
		for (i = k + 1; i < n; ++i) {
			sk += tmp[i] * tmp[i + n];
		}

		for (i = k + 1; i < n; ++i) {
			tmp[i + n] = 2 * (tmp[i + n] - sk * tmp[i]);
		}

		for (i = k + 1; i < n; ++i) { 
			for (j = i; j < n; ++j) {
				A[i * n + j] = A[j * n + i] = A[i * n + j] - tmp[i + n] * tmp[j] - tmp[i] * tmp[j + n];
			}
		}
	}
*/



___________________________________________

evc_13_13 last

		
	if (n <= 1) return -1; //nikogda ne vipolnit etot if izza togo chto v sim_13_13 uje provereno

	//tekushiy razmer i tekushaya iteraciya
	int cur_size = n, cur_iter = 0, i;	
	double sdvig, buf, sn_cur, cs_cur, sn_prev = 0, cs_prev = 0; //inic ne obyazat, inache budet rugatsa

	//otvet v cikle pixaem v E, pri umenshenii razmera matrici
	while ((max_iterations <= 0 || cur_iter < max_iterations) && cur_size > 2) {

		sdvig = A[cur_size - 1]; //po bogachevu : {a^k}_nn
		
		//QR razlojenie matrici Ak - sdvig * I : Ak - sdvig * I = QkRk, 
		//t.k. trexdiagonalnaya samosopryajennaya matrica, to srazu tut je poluchaem Ak+1
		
		for (i = 0; i < cur_size; ++i) {
			A[i] -= sdvig;
			//vot tut to mogut vozniknut problemi s poslednim elementom(otricatelniy ili polojitelniy? obyazatelno li delat polojitelnim)
		}

		for (i = 0; i + 1 < cur_size; ++i) {//n - 1 shagov
			buf = sqrt(A[i] * A[i] + B[i] * B[i]);
			if (abs(buf) < precision) {
				buf = 1;
			}

			cs_cur = A[i] / buf; //poryadok A[i], B[i] vajen!!
			sn_cur = -B[i] / buf; //takje
			
			A[i] = cs_cur * A[i] - sn_cur * B[i];	

			buf = A[i + 1];
			A[i + 1] = sn_cur * B[i] + cs_cur * A[i + 1];
			
			if (i + 2 < n) {
				B[i + 1] *= cs_cur;
			}
			
			B[i] = cs_cur * B[i] - sn_cur * buf;

			if (i > 0) {//i tut ochen somnitelnoe predpolojenie 
				//umnojaem teper na transponirovannuyu matricu
				//buf = sn_prev * A[i - 1] + cs_prev * B[i - 1];
				A[i - 1] = cs_prev * A[i - 1] - sn_prev * B[i - 1];
				B[i - 1] = -sn_prev * A[i];
				//B[i - 1] = buf;
				A[i] *= cs_prev;
			}

			cs_prev = cs_cur;
			sn_prev = sn_cur;
		}
		
		//bool flag = false; ??smutnoidiotskoe oshushenie
		//if (A[cur_size - 1] < 0) {flag = true;} ??
		//sn_prev i cs_prev inicializirovani t.k. cur_size > 2 bilo kogda voshli v cikl
		//domnojaem na tn-1n, 'i' posle cikla ravno cur_size - 1
		//i tut ochen somnitelnoe pedpolojenie
		//umnojaem teper na transponirovannuyu matricu
		//buf = sn_prev * A[i - 1] + cs_prev * B[i - 1];
		A[i - 1] = cs_prev * A[i - 1] - sn_prev * B[i - 1];
		B[i - 1] = -sn_prev * A[i];
		//B[i - 1] = buf;
		A[i] *= cs_prev;

		//if (flag) {B[cur_size - 2] *= -1;}??

		for (i = 0; i < cur_size; ++i) {
			A[i] += sdvig;
		}

		//vichislyaem normu ||A||8(beskonechnost) , xranim v peremennoy sdvig, t.k. ona uje ne nujna
		sdvig = abs(A[0]) + abs(B[0]);
		if (abs(A[cur_size - 1]) + abs(B[cur_size - 2]) > sdvig) {
			sdvig = abs(A[cur_size - 1]) + abs(B[cur_size - 2]);
		}
		
		for (i = 1; i + 1 < cur_size; ++i) {
			buf = abs(A[i]) + abs(B[i]) + abs(B[i - 1]);
			if (buf > sdvig) sdvig = buf; //vibor maximuma
		}

		//umenshaem razmer esli nado , bogachev, stranica 130
		if (abs(B[cur_size - 2]) < epsilon * sdvig) {
			E[cur_size - 1] = A[cur_size - 1];
			--cur_size;
		}

		if (max_iterations > 0) ++cur_iter; //ne obyazatelniy if, mojno srazu bez ifa delat		
	}

	if (cur_size > 2) {//znachit cur_iter == max_iterations
		return 1;// metod ne soshelsya
		//E[cur_size - 1] = A[cur_size - 1];//bug
	}

	if (evc_13_13_2(A[0], B[0], B[0], A[1], E[0], E[1]) == -1) {
		return -1;//cheto ni tak
	}

	//tut odna tonkost : daje esli cur_iter == max_iterations, schitayu chto metod soshelsya t.k. reshit matricu 2X2 polagayu 0 shagov

	return 0;
_____________________________________-

evc_13_13 mejdu zakommentirovannimi 'tut' i 'i tut', dlya 3X3 matric

		double matr[3][3];		
		matr[0][0] = A[0];
		matr[1][1] = A[1];
		matr[2][2] = A[2];
		matr[0][1] = matr[1][0] = B[0];
		matr[1][2] = matr[2][1] = B[1];
		matr[0][2] = matr[2][0] = 0;

		buf = sqrt(matr[0][0] * matr[0][0] + matr[1][0] * matr[1][0]);
		cs_prev = matr[0][0] / buf;
		sn_prev = -matr[1][0] / buf;
		
		double a, b, c;
		a = cs_prev * matr[0][0] - sn_prev * matr[1][0];
		b = cs_prev * matr[0][1] - sn_prev * matr[1][1];
		c = cs_prev * matr[0][2] - sn_prev * matr[1][2];
		matr[1][0] = sn_prev * matr[0][0] + cs_prev * matr[1][0];
		matr[1][1] = sn_prev * matr[0][1] + cs_prev * matr[1][1];
		matr[1][2] = sn_prev * matr[0][2] + cs_prev * matr[1][2];
		matr[0][0] = a;
		matr[0][1] = b;
		matr[0][2] = c;
		
		buf = sqrt(matr[1][1] * matr[1][1] + matr[2][1] * matr[2][1]);
		cs_cur = matr[1][1] / buf;
		sn_cur = -matr[2][1] / buf;

		a = cs_cur * matr[1][1] - sn_cur * matr[2][1];
		b = cs_cur * matr[1][2] - sn_cur * matr[2][2];
		matr[2][1] = sn_cur * matr[1][1] + cs_cur * matr[2][1];
		matr[2][2] = sn_cur * matr[1][2] + cs_cur * matr[2][2];
		matr[1][1] = a;
		matr[1][2] = b;

		a = cs_prev * matr[0][0] - sn_prev * matr[0][1];
		b = cs_prev * matr[1][0] - sn_prev * matr[1][1];
		c = cs_prev * matr[2][0] - sn_prev * matr[2][1];
		matr[0][1] = sn_prev * matr[0][0] + cs_prev * matr[0][1];
		matr[1][1] = sn_prev * matr[1][0] + cs_prev * matr[1][1];
		matr[2][1] = sn_prev * matr[2][0] + cs_prev * matr[2][1];
		matr[0][0] = a;
		matr[1][0] = b;
		matr[2][0] = c;
		
		a = cs_cur * matr[0][1] - sn_cur * matr[0][2];
		b = cs_cur * matr[1][1] - sn_cur * matr[1][2];
		c = cs_cur * matr[2][1] - sn_cur * matr[2][2];
		matr[0][2] = sn_cur * matr[0][1] + cs_cur * matr[0][2];
		matr[1][2] = sn_cur * matr[1][1] + cs_cur * matr[1][2];
		matr[2][2] = sn_cur * matr[2][1] + cs_cur * matr[2][2];
		matr[0][1] = a;
		matr[1][1] = b;
		matr[2][1] = c;

		//vozmojno lyajki na -1 umnojim
		
		A[0] = matr[0][0];
		A[1] = matr[1][1];
		A[2] = matr[2][2];
		B[0] = matr[1][0];
		B[1] = matr[2][1];

_________________________________________

rabotayushaya versiya, bez shamanstva s krasotoy:


#include "task_13_13.h"

#include <math.h>

int evc_memsize_13_13(int n){
	return 0; //nichego ne videlyaem
}

//-1 esli metod ne primenim , no etot sluchay uje proveren v sim_13_13
//1 esli metod ne sxoditsya za max_iterations(>0) shagov
//0 uspex
int evc_13_13(int n, int max_iterations, double epsilon, double* A, double* B, double* E, double* tmp, double precision){
		
	if (n <= 1) return -1; //nikogda ne vipolnit etot if izza togo chto v sim_13_13 uje provereno

	//tekushiy razmer i tekushaya iteraciya
	int cur_size = n, cur_iter = 0, i;	
	double sdvig, buf, sn_cur, cs_cur, sn_prev = 0, cs_prev = 0, bi_prev; //inic ne obyazat, inache budet rugatsa

	//otvet v cikle pixaem v E, pri umenshenii razmera matrici
	while ((max_iterations <= 0 || cur_iter < max_iterations) && cur_size > 2) {

		sdvig = A[cur_size - 1]; //po bogachevu : {a^k}_nn
		
		//QR razlojenie matrici Ak - sdvig * I : Ak - sdvig * I = QkRk, 
		//t.k. trexdiagonalnaya samosopryajennaya matrica, to srazu tut je poluchaem Ak+1
		
		for (i = 0; i < cur_size; ++i) {
			A[i] -= sdvig;
			//vot tut to mogut vozniknut problemi s poslednim elementom(otricatelniy ili polojitelniy? obyazatelno li delat polojitelnim)
		}

		//tut

		//otstuplenie-!!
		for (i = 0; i + 1 < cur_size; ++i) {//n - 1 shagov
			buf = sqrt(A[i] * A[i] + (i == 0 ? B[0] * B[0] : bi_prev * bi_prev));
			if (abs(buf) < precision) {
				buf = 1;
			}

			cs_cur = A[i] / buf; //poryadok A[i], B[i] vajen!!
			sn_cur = (i == 0 ? -B[0] : -bi_prev) / buf; //takje
			
			A[i] = cs_cur * A[i] - sn_cur * (i == 0 ? B[0] : bi_prev);	

			buf = A[i + 1];
			A[i + 1] = sn_cur * B[i] + cs_cur * buf;
			
			if (i + 2 < n) {
				bi_prev = B[i + 1];
				B[i + 1] *= cs_cur;
			}
			
			B[i] = cs_cur * B[i] - sn_cur * buf;

			if (i > 0) {//i tut ochen somnitelnoe predpolojenie 
				//umnojaem teper na transponirovannuyu matricu
				//buf = sn_prev * A[i - 1] + cs_prev * B[i - 1];
				A[i - 1] = cs_prev * A[i - 1] - sn_prev * B[i - 1];
				B[i - 1] = -sn_prev * A[i];
				//B[i - 1] = buf;
				A[i] *= cs_prev;
			}

			cs_prev = cs_cur;
			sn_prev = sn_cur;
		}
		
		//bool flag = false; ??smutnoidiotskoe oshushenie
		//if (A[cur_size - 1] < 0) {flag = true;} ??
		//sn_prev i cs_prev inicializirovani t.k. cur_size > 2 bilo kogda voshli v cikl
		//domnojaem na tn-1n, 'i' posle cikla ravno cur_size - 1
		//i tut ochen somnitelnoe pedpolojenie
		//umnojaem teper na transponirovannuyu matricu
		//buf = sn_prev * A[i - 1] + cs_prev * B[i - 1];
		A[i - 1] = cs_prev * A[i - 1] - sn_prev * B[i - 1];
		B[i - 1] = -sn_prev * A[i];
		//B[i - 1] = buf;
		A[i] *= cs_prev;

		//otstuplenie-!!

		//i tut		

		for (i = 0; i < cur_size; ++i) {
			A[i] += sdvig;
		}

		//vichislyaem normu ||A||8(beskonechnost) , xranim v peremennoy sdvig, t.k. ona uje ne nujna
		sdvig = abs(A[0]) + abs(B[0]);
		if (abs(A[cur_size - 1]) + abs(B[cur_size - 2]) > sdvig) {
			sdvig = abs(A[cur_size - 1]) + abs(B[cur_size - 2]);
		}
		
		for (i = 1; i + 1 < cur_size; ++i) {
			buf = abs(A[i]) + abs(B[i]) + abs(B[i - 1]);
			if (buf > sdvig) sdvig = buf; //vibor maximuma
		}

		//umenshaem razmer esli nado , bogachev, stranica 130
		if (abs(B[cur_size - 2]) < epsilon * sdvig) {
			E[cur_size - 1] = A[cur_size - 1];
			--cur_size;
		}

		if (max_iterations > 0) ++cur_iter; //ne obyazatelniy if, mojno srazu bez ifa delat		
	}

	if (cur_size > 2) {//znachit cur_iter == max_iterations
		return 1;// metod ne soshelsya
		//E[cur_size - 1] = A[cur_size - 1];//bug
	}

	if (evc_13_13_2(A[0], B[0], B[0], A[1], E[0], E[1]) == -1) {
		return -1;//cheto ni tak
	}

	//tut odna tonkost : daje esli cur_iter == max_iterations, schitayu chto metod soshelsya t.k. reshit matricu 2X2 polagayu 0 shagov
	evc_13_13_sort(n, E);

	return 0;
}

//0 uspex
//-1 ploxoy vxod, rugaemsa
int evc_13_13_2(double a11, double a12, double a21, double a22, double& e1, double& e2) {

	// !! -dopisat- !!
	//reshil po idiotski, xotya...
	
	double d = sqrt((a11 - a22) * (a11 - a22) + 4 * a12 * a21);
	e1 = ((a11 + a22) - d) / 2;
	e2 = ((a11 + a22) + d) / 2;

	return 0;
}
 
int evc_13_13_sort(int n, double* E) {
	int i, j, pos;
	double buf;

	for (i = 0; i < n; ++i) {
		pos = i;
		for (j = i + 1; j < n; ++j)
			if (E[j] < E[pos])
				pos = j;

		if (pos > i) {
			buf = E[pos];
			E[pos] = E[i];
			E[i] = buf;
		}
	}

	return 0;
}


#include "task_13_13.h"
#include <math.h>

int is_sim_13_13(int n, double* A, double precision){
	int i, j;
	double ij, ji;

	for (i = 0; i + 1 < n; ++i)
		for (j = i + 1; j < n; ++j) {
			ij = A[i * n + j];
			ji = A[j * n + i];

			//otnositelnaya pogreshnost!!! 
			if (abs(ij / ji - 1) >= precision) {
				return -1; //mojet luchshe abs(ij - ji) >= precision -> absolyutnaya pogreshnost?, !-nujno podumat-!
			}
		}

	return 0;
}

int is_det_zero_13_13(int n, double* A, double precision){
	int i, j, k;
	double tmp;

	for (i = 0; i < n; ++i) {
		k = i;
		
		for (j = i + 1; j < n; ++j) {
			if (abs(A[j * n + i]) > abs(A[k * n + i]))	//abs!!!!
				k = j;
		}
		
		if (abs(A[k * n + i]) < precision) {
			return 0;	//opredelitel == 0
		}

		if (k != i) {
			for (j = i; j < n; ++j) { //swap
				tmp = A[i * n + j];
				A[i * n + j] = A[k * n + j];
				A[k * n + j] = tmp;
			}	
		}

		tmp = A[i * n + i];

		for (j = i; j < n; ++j) {
			A[i * n + j] /= tmp;
		}
		
		for (k = i + 1; k < n; ++k) {
			tmp = A[k * n + i];
		
			for (j = i; j < n; ++j) {
				A[k * n + j] -= A[i * n + j] * tmp;				
			}
		}
	}

	return 1;
}

int sim_memsize_13_13(int n){
	//return n * n > n + n ? n * n : n + n; // + 1 or 2 ??
	return n * n; //nujen dlya proveki opredelitelya na ravenstvo nulyu, no ne dlya algoritma privedeniya k pochti treugolnomu vidu
}

int sim_13_13(int n, double* A, double* tmp, double precision){
	if (is_sim_13_13(n, A, precision) != 0) {
		//printf("bad input : matrix is not symmetric!"); //metod ne primenim : matrica ne simmetrichna
		return -1; //0 ?
	}		

	int i, j, k;

	for (i = 0; i < n; ++i) 
		for (j = 0; j < n; ++j)
			tmp[i * n + j] = A[i * n + j];

	if (is_det_zero_13_13(n, tmp, precision) != 1) {
		//printf("bad input : |A| = 0"); // metod ne primenim : opredelitel == 0
		return -1;
	}	

	if (n < 2) return -1;
	
	//privedenie k pochti treugolnomu vidu : osnovnoy algoritm
	double sk, norm, buf;

	for (k = 0; k + 2 < n; ++k) {
		sk = 0;
		
		for (i = k + 2; i < n; ++i) {
			sk += A[i * n + k] * A[i * n + k];	//vichislyaem summu kvadratov
		}

		norm = sqrt(A[(k + 1) * n + k] * A[(k + 1) * n + k] + sk); //dobavlyaem ostavshiysa chlen i berem koren
		buf = norm;			//ocherednoy poddiagonalniy element
		
		if (abs(norm) < precision) continue; //uje 0, prodoljaem...
	
		A[(k + 1) * n + k] -= norm;		//sleduem formule
		norm = sqrt(A[(k + 1) * n + k] * A[(k + 1) * n + k] + sk); //vichislyaem normu otrajayushego x
		
		for (i = k + 1; i < n; ++i) {
			A[i * n + k] /= norm;	//vichislyaem sam vektor x(otrajayushiy)
		}

		for (i = k + 1; i < n; ++i) {
			A[k * n + i] = 0;
			for (j = k + 1; j < n; ++j) {
				A[k * n + i] += A[i * n + j] * A[j * n + k];	//vichislyaem Ax
			}
		}

		sk = 0;
		for (i = k + 1; i < n; ++i) {
			sk += A[i * n + k] * A[k * n + i];	//vichislyaem (y,x) - skalyarnoe proizvedenie. po formule iz bogacheva
		}

		for (i = k + 1; i < n; ++i) {
			A[k * n + i] -= sk * A[i * n + k];		//vektor z = 2(y - (y,x)x) iz formuli v bogacheve
			A[k * n + i] *= 2;
		}
		
		for (i = k + 1; i < n; ++i) { 
			for (j = i; j < n; ++j) {
				A[i * n + j] = A[j * n + i] = A[i * n + j] - A[k * n + i] * A[j * n + k] - A[i * n + k] * A[k * n + j]; //umnojaem na Ui
			}
		}

		A[(k + 1) * n + k] = buf; //A[k * n + (k + 1)] = buf; //mojno tolko odnu storonu, a snaruji 3 vektora!

		//for (i = k + 2; i < n; ++i) {
			//A[i * n + k] = A[k * n + i] = 0; //zachem obnulyat?
		//}
	}

	return 0;
}

//osnovnoy algoritm : potreblyaet 2*n pamyati

/*
	//privodim k pochti treugolnomu vidu
	double sk, norm;

	for (k = 0; k + 2 < n; ++k) {//nichego ne sdelaet esli n == 2
		for (i = k + 1; i < n; ++i) {
			tmp[i] = A[i * n + k];
		}
		
		sk = 0;
		for (i = k + 2; i < n; ++i) {
			sk += A[i * n + k] * A[i * n + k];
		}

		norm = sqrt(A[(k + 1) * n + k] * A[(k + 1) * n + k] + sk);
		if (abs(norm) < precision) continue; //uje 0, prodoljaem...

		A[k * n + (k + 1)] = A[(k + 1) * n + k] = norm;

		for (i = k + 2; i < n; ++i) {
			A[k * n + i] = A[i * n + k] = 0;		
		}	

		tmp[k + 1] -= norm;
		norm = sqrt(tmp[k + 1] * tmp[k + 1] + sk);

		for (i = k + 1; i < n; ++i) {
			tmp[i] /= norm;
		}

		//k + 1, k + 1,
		for (i = k + 1; i < n; ++i) { //mojet memory chut bolshe nado?? dlya tmp...
			tmp[i + n] = 0;
			for (j = k + 1; j < n; ++j) {
				tmp[i + n] += A[i * n + j] * tmp[j];
			}	
		}

		sk = 0;
		for (i = k + 1; i < n; ++i) {
			sk += tmp[i] * tmp[i + n];
		}

		for (i = k + 1; i < n; ++i) {
			tmp[i + n] = 2 * (tmp[i + n] - sk * tmp[i]);
		}

		for (i = k + 1; i < n; ++i) { 
			for (j = i; j < n; ++j) {
				A[i * n + j] = A[j * n + i] = A[i * n + j] - tmp[i + n] * tmp[j] - tmp[i] * tmp[j + n];
			}
		}
	}
*/




void usage();

 //0 - matrica simmetrichna
 //-1 - matrica ne simmetrichna -> metod uprosheniya ne primenim
int is_sim_13_13(int n, double* A, double precision);
 //v A pri uspeshnom zavershenii sim_13_13 xranitsya : elementi glavnoy diagonali na glavnoy diagonali, a takje
 //elementi pervoy poddiagonali tam je, a na meste ostalnix elemntov matrici A - musor;
 //t.k. etoy informacii budet dostatochno vvidu trexdiagonalnosti i samosopryajennosti resheniya(itogovoy pochti treugolnoy matrici)

 //1 - opredelitel != 0; 0 - opredelitel == 0
int is_det_zero_13_13(int n, double* A, double precision);

 //0 - работа завершена успешно, матрица упрощена
 //-1 - метод упрощения не применим к данной матрице
int sim_13_13(int n, double* A, double* tmp, double precision);
int sim_memsize_13_13(int n);


 //0 - работа завершена успешно
 //1 - метод не сходится за указанное число итераций
 //-1 - метод поиска собственных значений не применим к данной матрице - nikogda ne vozvrashaet t.k. 
 //pri vipolnenii sim_13_13 uje proveryaetsa primenimost metoda k dannoy matrice

 //vmesto matrici A, diagonalnie elementi i elementi pervoy poddiagonali, t.k. matrica samosopryajena i pochti treugolna, 
 //t.e. simmetrichna i trexdiagonalna
 //poetomu peredayu v parametre A : diagonalnie elementi (razmer : n)
 //a v parametre B : elementi pervoy poddiagonali(razmer : n - 1)
 //tmp ostavil na budushee : vdrug ponadobitsya
int evc_13_13(int n, int max_iterations, double epsilon, double* A, double* B, double* E, double* tmp, double precision);
int evc_memsize_13_13(int n); //nichego ne videlyaet : ne nujno
int evc_13_13_2(double a11, double a12, double a21, double a22, double& e1, double& e2);
int evc_13_13_sort(int n, double* E);


#include "task_13_13.h"

#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

bool Debug;
bool Error;

bool Time;
bool Print;

int max_iter;

double prec;
double eps;

void init() {
	prec = 1e-14;
	eps = 1e-10;
	max_iter = 0;
	Time = false;
	Print = false;
	Debug = false;
	Error = false;
}

void usage() {
	printf("\n");
	printf("Usage: evc input_file_name [default - input.txt] output_file_name [default - output.txt] [options] \n");
	printf("Where options include: \n");
	printf(" -d    print debug messages [default OFF] \n");
    printf(" -e    print errors [default OFF]");
    printf(" -p    print matrix [default OFF]");
    printf(" -t    print execution time [default OFF]");
    printf(" -prec=<num>       precision [default - 1e-14] ");
    printf(" -eps=<num>        'epsilon' [default - 1e-10]");
    printf(" -max_iter=<num>   limit number of iterations [default - 0, i.e. not limit]");
    printf(" -h, -?     print this and exit");
}

int main(int argc, char** argv) {

	init();

	if (argc < 3) {
		usage();
		return 0; //nujno li uzmenit vozvrashaemoe znachenie zdes ? 
	}

	FILE *fin, *fout;

	if ((fin = fopen(argv[1], "r")) == NULL) {
		printf("bad input file name \n");
		usage();
		return 0;	//0?
	}

	//mojet ne stoit v samom nachale fout otkrivat?
	if ((fout = fopen(argv[2], "w")) == NULL) {
		printf("bad output file name \n");
		usage();
		return 0;	//0?
	}

	int n;
	//vse li normalno prochel?
	fscanf(fin, "%d", &n); 

	if (n < 2) {
		fprintf(stderr, "n too small \n");
		return 0; //0?
	}

	if (n > 100) {	//100?
		fprintf(stderr, "n too big \n");
		return 0;//0?
	}

	//vse li normalno videlil?
	double *A = (double*)malloc(n * n * sizeof(double));
	
	int i, j;
	for (i = 0; i < n; ++i)
		for (j = 0; j < n; ++j)
			fscanf(fin, "%lf", &A[i * n + j]); //vse li normalno prochel?

	fclose(fin); //problems?

		//!-matlab-!
		fprintf(fout, "x=[");
		for (i = 0; i < n; ++i) {
			for (j = 0; j < n; ++j) {
				fprintf(fout, "%1.10lf ", A[i * n + j]);
			}
			fprintf(fout, ";");
		}
		fprintf(fout, "];\n");

	double* overhead = (double*)malloc(sim_memsize_13_13(n) * sizeof(double));
	
	if (sim_13_13(n, A, overhead, prec) == -1) {
		printf("metod ne primenim : matrica ne simmetrichna libo opredelitel == 0 \n");

		free(A);
		free(overhead);

		return 0; // 0?
	}

	//for (i = 0; i < n; ++i) {
	//	fprintf(fout, "%.9lf ", A[i * n + i]);
	//}
	//fprintf(fout, "\n");
	//for (i = 0; i + 1 < n; ++i) {
	//	fprintf(fout, "%.9lf ", A[(i + 1) * n + i]);
	//}
	//fprintf(fout, "\n");
	
	//mesto dlya Eigen - massiv gde budut otveti
	double* Eigen = (double*)malloc(n * sizeof(double));
	//elementi pervoy poddiagonali : B
	double* B = (double*)malloc((n - 1) * sizeof(double));
	for (i = 0; i + 1 < n; ++i) {
		B[i] = A[(i + 1) * n + i];
	}	
	//dalshe idut nexitrie manipulyacii , s celyu osvobodit n * n elementov v A iz kotorix dalee potrebuetsa tolko n shtuk
	free(overhead);
	overhead = (double*)malloc(n * sizeof(double));
	for (i = 0; i < n; ++i) {
		overhead[i] = A[i * n + i];
	}
	free(A);
	A = (double*)malloc(n * sizeof(double));
	for (i = 0; i < n; ++i) {
		A[i] = overhead[i];
	}
	free(overhead);
	overhead = (double*)malloc(evc_memsize_13_13(n) * sizeof(double));	
	//fprintf(fout, "%1.9lf\n", overhead);

	//for (i = 0; i < n; ++i) {
	//	fprintf(fout, "%.9lf ", A[i]);
	//}
	//fprintf(fout, "\n");
	//for (i = 0; i + 1 < n; ++i) {
	//	fprintf(fout, "%.9lf ", B[i]);
	//}
	//fprintf(fout, "\n");

	//vizov osnovnoy funkcii
	int respond = evc_13_13(n, max_iter, eps, A, B, Eigen, overhead, prec);
	
	free(A);
	free(B);
	free(overhead);

	if (respond == -1) {
		//never falls here tak kak v sim_13_13 uje proveryal i simmetrichnost i opredelitel
		printf("metod ne primenim \n");

		free(Eigen);

		return 0; //0?
	} else

	if (respond == 1) {
		printf("metod ne sxoditsya za ukazannoe chislo iteraciy \n");

		free(Eigen);

		return 0; // 0?
	} else
	if (respond == 0) {
		fprintf(fout, "%d \n", n);
		for (i = 0; i < n; ++i) {
			fprintf(fout, "%1.9lf \n", Eigen[i]);
		}

//		for (i = 0; i < n; ++i) {
//			for (j = 0; j < n; ++j) {
//				fprintf(fout, "%1.9lf ", A[i * n + j]);
//			}
//			fprintf(fout, "\n");
//		}

		//!-matlab-!
		//fprintf(fout, "y=[");
		//for (i = 0; i < n; ++i) {
		//	for (j = 0; j < n; ++j) {
		//		fprintf(fout, "%1.10lf ", A[i * n + j]);
		//	}
		//	fprintf(fout, ";");
		//}
		//fprintf(fout, "];");

		free(Eigen);

	}

	return 0;
}