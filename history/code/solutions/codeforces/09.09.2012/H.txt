import static java.lang.Math.min;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;


public class Main {
	public static void main(String[] args) throws IOException {
		Scanner in = new Scanner(new File("input.txt"));
		PrintWriter out = new  PrintWriter("output.txt");

		int p = in.nextInt();
		int n = in.nextInt();
		int m = in.nextInt();
		
		int[] r = new int[n];
		int[] c = new int[m];
		
		Arrays.fill(r, 0);
		Arrays.fill(c, 0);
		
		int[][] src = new int[n][m];
		for (int i = 0; i < n; ++i)
			for (int j = 0; j < m; ++j) {
				src[i][j] = in.nextInt();
				if (src[i][j] % p != 0) { 
					int buf = p - src[i][j] % p;
					src[i][j] += buf;
					r[i] += buf;
					c[j] += buf;
				}
			}
		
		int s1 = 0, s2 = 0;
		boolean can = true;

		for (int i = 0; i < n; ++i) {
			if (r[i] % p != 0)
				can = false;
			s1 += r[i];
			r[i] /= p;
		}
		
		for (int j = 0; j < m; ++j) {
			if (c[j] % p != 0)
				can = false;
			s2 += c[j];
			c[j] /= p;
		}
		
		if (s1 != s2)
			can = false;
		
		s1 /= p;
		
		if (!can) {
			out.println(-1);
		} else {
			Solver sol = new Solver(n, r, m, c);
			if (sol.solve() != s1)
				out.println(-1);
			else {
				int[][] ans = sol.make();
				for (int i = 0; i < n; ++i) {
					for (int j = 0; j < m; ++j) { 
						out.print(src[i][j] - ans[i][j] * p);
						out.print(" ");
					}
					out.println();
				}
			}			
		}
		
		out.close();
	}	
}

class Solver {
	static final int size = 62; //!!!
	static final int inf = (int)1e9;
	
	int N, M, n, s, t;
	int[] d, ptr, q;
	int[][] cst, flw;
	
	Solver(int n, int[] r, int m, int[] c) {
		N = n;
		M = m;
		
		this.n = n = n + m + 2;
		
		s = 0;
		t = n - 1;
		
		d = new int[n];
		ptr = new int[n];
		q = new int[n];
		
		cst = new int[n][n];
		flw = new int[n][n];
		
		for (int i = 0; i < n; ++i) {
			Arrays.fill(flw[i], 0);
			Arrays.fill(cst[i], 0);
		}
			
		for (int i = 0; i < N; ++i)
			cst[s][i + 1] = r[i];
		
		for (int i = N + 1; i <= N + M; ++i)
			cst[i][t] = c[i - (N + 1)];
		
		for (int i = 1; i <= N; ++i)
			for (int j = N + 1; j <= N + M; ++j)
				cst[i][j] = 1;
		//!!!
	}
	
	boolean bfs() {
		int qh = 0, qt = 0;
		q[qt++] = s;
		Arrays.fill(d, -1);
		d[s] = 0;
		while (qh < qt) {
			int v = q[qh++];
			for (int i = 0; i < n; ++i)
				if (d[i] == -1 && flw[v][i] < cst[v][i]) {
					q[qt++] = i;
					d[i] = d[v] + 1;
				}
		}
		return d[t] != -1;
	}
	
	int dfs(int v, int f) {
		if (f == 0) return 0;
		if (v == t) return f;
		for (; ptr[v] < n; ++ptr[v]) {
			if (d[ptr[v]] != d[v] + 1) continue;
			int offer = dfs(ptr[v], min(f, cst[v][ptr[v]] - flw[v][ptr[v]]));
			if (offer > 0) {
				flw[v][ptr[v]] += offer;
				flw[ptr[v]][v] -= offer;
				return offer;
			}
		}
		return 0;
	}
	
	int solve() {
		int flow = 0;
		for (;;) {
			if (!bfs()) break;
			Arrays.fill(ptr, 0);
			for (int F = dfs(s, inf); F > 0; F = dfs(s, inf))
				flow += F;
		}
		return flow;
	}
	
	int[][] make() {
		int[][] out = new int[N][M];
		for (int i = 0; i < N; ++i)
			for (int j = 0; j < M; ++j)
				out[i][j] = flw[i + 1][N + 1 + j];
		
		return out;
	}
}