import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Scanner;


public class Main {
	public static void main(String[] args) throws IOException {
		Scanner in = new Scanner(new File("input.txt"));
		out = new PrintWriter("output.txt");
		
		int n = in.nextInt();
		
		isLeaf = new int[borSize + 1];
		bor = new int[borSize + 1][];

		Arrays.fill(isLeaf, 0);
		bor[0] = new int[alphSize];
		Arrays.fill(bor[0], -1);		
		
		size = 1;

		fst = in.next();		
		int ans = add(fst);
		
		path = new int[fst.length()];
		for (int i = 0, p = 0; i < fst.length(); ++i)
			path[i] = p = bor[p][fst.charAt(i) - 'a'];
		
		for (int i = 1; i < n; ++i) {
			ans += add(in.next());
		}
		
		out.println(ans);
		
		check = true;
		word = new char[100];
		wsize = 0;
		
		dfs(0);
		
		out.close();
	}
	
	static boolean check;
	
	static char[] word;
	static int wsize;
	
	static String fst;
	
	static void dfs(int v) {
		if (isLeaf[v] != 0) {
			check = false;

			for (int k = 0; k < isLeaf[v]; ++k) {
				for (int i = 0; i < wsize; ++i)	out.print(word[i]);			
				out.println();
			}
		}
		
		if (check) {
			word[wsize] = fst.charAt(wsize);
			dfs(path[wsize++]);
			--wsize;

			for (int i = 0; i < alphSize; ++i)
				if (bor[v][i] != -1 && i != fst.charAt(wsize) - 'a') {
					word[wsize++] = (char)('a' + i);
					dfs(bor[v][i]);
					--wsize;
				}		
			
			return;
		} 

		for (int i = 0; i < alphSize; ++i)
			if (bor[v][i] != -1) {
				word[wsize++] = (char)('a' + i);
				dfs(bor[v][i]);
				--wsize;
			}
		
	}
	
	static int[] path;
	
	static int add(String s) {
		int ret = 0;
		
		int p = 0;
		for (int i = 0; i < s.length(); ++i) {
			int c = s.charAt(i) - 'a';
			if (bor[p][c] == -1) {
				bor[size] = new int[alphSize];
				Arrays.fill(bor[size], -1);
				bor[p][c] = size;
				++size;
				++ret;
			}
			p = bor[p][c];
		}
		
		++isLeaf[p];
		return ret;
	}
	
	static int size;
	
	static int[] isLeaf;
	static int[][] bor; 
	
	static final int borSize = 100 * 100;
	static final int alphSize = 26;
	
	static PrintWriter out;
}

