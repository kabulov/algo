
here we explore RAII (std::tr1::shared_ptr) and mutex objects
we use the fact that shared_ptr`s destructor is automatically called when leaving the scope
but we can substitute shared_ptr`s destructor with some other deleter function

void lock(Mutex *mutex);
void unlock(Mutex *mutex);

class Lock {
  public:
    explicit Lock(Mutex *mutex) : mptr(mutex, unlock) {
      lock(mptr.get());
    }
  private:
    str::tr1::shared_ptr<Mutex> mptr;
};  

//...
Mutex m;
//...
{
  //...
  Lock lock(&m);
  //...
}

basic idea looked like this

class Lock {
  public:
    explicit Lock(Mutex *mutex) : mptr(mutex) {
      lock(mptr);
    }
    ~Lock() {
      unlock(mptr);
    }
  private:
    Mutex *mptr;
};

so the usage is 

//...
Mutex m;
Lock lock1(&m);

but problem arises when we try to copy it (no matter why)

//...
Lock lock2(lock1);

what should happen here ?
one of solutions is to make use of shared_ptr which is demonstrated above
